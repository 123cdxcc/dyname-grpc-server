// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: api/grpc_helper.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcHelperClient is the client API for GrpcHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcHelperClient interface {
	ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceReply, error)
}

type grpcHelperClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcHelperClient(cc grpc.ClientConnInterface) GrpcHelperClient {
	return &grpcHelperClient{cc}
}

func (c *grpcHelperClient) ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceReply, error) {
	out := new(ListServiceReply)
	err := c.cc.Invoke(ctx, "/api.GrpcHelper/ListService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcHelperServer is the server API for GrpcHelper service.
// All implementations must embed UnimplementedGrpcHelperServer
// for forward compatibility
type GrpcHelperServer interface {
	ListService(context.Context, *ListServiceRequest) (*ListServiceReply, error)
	mustEmbedUnimplementedGrpcHelperServer()
}

// UnimplementedGrpcHelperServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcHelperServer struct {
}

func (UnimplementedGrpcHelperServer) ListService(context.Context, *ListServiceRequest) (*ListServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListService not implemented")
}
func (UnimplementedGrpcHelperServer) mustEmbedUnimplementedGrpcHelperServer() {}

// UnsafeGrpcHelperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcHelperServer will
// result in compilation errors.
type UnsafeGrpcHelperServer interface {
	mustEmbedUnimplementedGrpcHelperServer()
}

func RegisterGrpcHelperServer(s grpc.ServiceRegistrar, srv GrpcHelperServer) {
	s.RegisterService(&GrpcHelper_ServiceDesc, srv)
}

func _GrpcHelper_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcHelperServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GrpcHelper/ListService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcHelperServer).ListService(ctx, req.(*ListServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcHelper_ServiceDesc is the grpc.ServiceDesc for GrpcHelper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcHelper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.GrpcHelper",
	HandlerType: (*GrpcHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListService",
			Handler:    _GrpcHelper_ListService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc_helper.proto",
}
